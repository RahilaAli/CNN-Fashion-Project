# -*- coding: utf-8 -*-
"""CNN.Fashion-Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VgYJ_mUNwuue9isBJZA9kl7Jl8-Y4NhV

#Convolutional neural Network

# **Fashion-classification Project**

train CNN on 60,000 fashion images

test CNN on 10,000 fashion images

#Import Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import keras
import tensorflow

"""# Load Dataset"""

(X_train, y_train) , (X_test , y_test) = keras.datasets.fashion_mnist.load_data()

X_train.shape, y_train.shape

X_test.shape, y_test.shape

y_train

X_test[0]

y_test[0]

"""#Show image"""

plt.imshow(X_train[0])

plt.imshow(X_train[0] , cmap = 'Greys')

class_labels = ["T-shirt/top", "Trouser" , "Pullover" , "Dress" , "Coat" , "Sandal" , "Shirt" , "Sneaker" , "Bag" , "Ankie boot"]
'''
0 => T-shirt/top
1 => Trouser
2 => Pullover
3 => Dress
4 => Coat
5 => Sandel
6 => Shirt
7 => Sneaker
8 => Bag
9 => Ankie boot '''

"""# For all images"""

plt.figure(figsize = (16 ,16))

j=1
for i in np.random.randint(0 , 10000 , 25):
  plt.subplot(5,5,j);j+=1
  plt.imshow(X_train[i] , cmap = "Greys")
  plt.axis('off')
  plt.title('{} / {}'.format(class_labels[y_train[i]], y_train[i]))

"""## Change the Dimension"""

X_train.ndim

X_train = np.expand_dims(X_train, -1)
X_test = np.expand_dims(X_test, -1)

X_train.shape

X_train.ndim

X_train.shape

"""## Scaling"""

X_train = X_train/255
X_test = X_test/255

X_train[0]

"""## Split Dataset"""

from sklearn.model_selection import train_test_split
X_train , X_val , y_train, y_val = train_test_split(X_train , y_train , test_size=0.2, random_state = 2023)

X_train.shape , y_train.shape

X_val.shape, y_val.shape

"""# CNN-Model Building"""

model = keras.models.Sequential([
    keras.layers.Conv2D(filters=32, kernel_size=3 , strides=(1,1), padding='valid', activation = 'relu' , input_shape=(28, 28 , 1)),
    keras.layers.MaxPooling2D(pool_size=(2,2)),
    keras.layers.Flatten(),
    keras.layers.Dense(units=128,activation = 'relu'),
    keras.layers.Dense(units=10,activation = 'softmax'),
])

model.summary()

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=10, batch_size=512,verbose=1,validation_data=(X_val,y_val))

"""# Test the Model"""

model.predict(np.expand_dims(X_test[0], axis=0)).round(2)

np.argmax(model.predict(np.expand_dims(X_test[0], axis=0)).round(2))

y_test[0]

y_pred = model.predict(X_test).round(2)
y_pred

model.evaluate(X_test,y_test)

"""# Visualize Output"""

plt.figure(figsize = (16 ,30))

j=1
for i in np.random.randint(0 , 10000 , 60):
  plt.subplot(10,6,j);j+=1
  plt.imshow(X_test[i].reshape(28,28) , cmap = "Greys")
  plt.title('Actual = {} / {}\nPredicted = {}/{}'.format(class_labels[y_test[i]], y_test[i], class_labels[np.argmax(y_pred[i])],np.argmax(y_pred[i])))
  plt.axis('off')

"""# Confusion Matrix"""

from sklearn.metrics import confusion_matrix

plt.figure(figsize=(16,9))
y_pred_labels = [ np.argmax(label) for label in y_pred ]
cm = confusion_matrix(y_test, y_pred_labels)

#show cm
sns.heatmap(cm, annot=True, fmt='d', xticklabels=class_labels, yticklabels=class_labels)

"""### Precision = TP/(TP + FP)
### Recall = TP/ (TP+FN)
"""

from sklearn.metrics import classification_report
cr = classification_report(y_test, y_pred_labels, target_names=class_labels)
print(cr)

"""# Save Model"""

model.save('Fashion_classification_CNN_model.h5')

path = '/content/drive/MyDrive/Fashion_classification_CNN_model_v2.h5'

model.save(path)

model_deploy = keras.models.load_model('Fashion_classification_CNN_model.h5')

model_deploy.predict(X_test).round(2)

model_deploy.predict(np.expand_dims(X_test[0] , axis=0)).round(2)

np.argmax(model_deploy.predict(np.expand_dims(X_test[0] , axis=0)))